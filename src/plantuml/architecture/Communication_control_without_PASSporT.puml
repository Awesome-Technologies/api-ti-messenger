@startuml TI-Messenger communication control without PASSporT
=======
/'
Vorteile:
- bessere Kompatibilität mit Matrix API
- einfachere Architektur
- keine Signaturprüfung von PASSporT im Messenger-Proxy
  - kein download von Signatur-, CA- und Root-Zertifikaten erforderlich (Schnittstelle und
    Spezifikation fehlen noch in aktueller Spec)
  - keine Abhängigkeit mehr zu PT Infrastructure
- Bessere Latenz bei Suchen im FHIR-Dir
  - einheitliche Schnittstelle im FHIR-Dir für TIM und KIM 2.0
  - geringere Abhängigkeit vom FHIR-Dir
- Ermöglicht TI 2.0 Zero Trust Architektur (Policy Decision Point (PDP) ist entweder in
  Registrierungsdienst integriert oder eigenständige Komponente, Policy Enforcement Point ist der Messenger-Proxy)
  - einfache Erweiterung um zusätzliche Policies im PDP möglich (z. B. für Versicherte)
  - Sicherheit von TIM wird durch TIM-Komponenten kontrolliert (und nicht durch das FHIR-Dir)
- Bessere UX für Austausch von TI-M Adressen bei persönlichem Kontakt.
  - Austausch von TIM Adressen grundsätzlich auch remote möglich

=======
Was muss getan werden, um ohne PASSporTs auszukommen?
- PASSporT aus der TI-M Spec entfernen
- PASSporT aus der FHIR-Dir Spec entfernen
- REST Operationen am Messenger-Proxy spezifizieren (invite von MXIDs erlauben und Erlaubnis widerrufen,
  Dauer der Erlaubnis als Parameter)
- zusätzliche REST Operationen an I_TIM_Provider_Services
- Erläuternde Beschreibung der Abläufe zwischen Messenger-Proxy und Registrierungsdienst
!pragma layout smetana
'!include ../includes/gem-tim.iuml
'!include ../includes/gem-tim-monochrome.iuml
'/
skinparam monochrome true
=======

@startuml Communication control without PASSporT
skinparam sequenceMessageAlign direction
skinparam minClassWidth 200
skinparam BoxPadding 1
skinparam sequenceReferenceHeaderBackgroundColor palegreen
scale max 2048 width

skinparam sequence {
ArrowColor black
ArrowFontSize 17
ActorBorderColor black
LifeLineBorderColor black
LifeLineBackgroundColor Gainsboro

ParticipantBorderColor Motivation
ParticipantBackgroundColor Motivation
ParticipantFontName Impact
ParticipantFontSize 20
ParticipantFontColor black
ParticipantBorderColor Black
ParticipantBackgroundColor MOTIVATION

ActorBackgroundColor Gainsboro
ActorFontColor black
ActorFontSize 20
ActorFontName Aapex
}

actor a as "Nutzer A"
participant cl as "TI-M Client A"
box TI-Messenger Anbieter A #GhostWhite
participant mp as "Messenger-Service A\n(Messenger-Proxy +\nHomeserver)"
participant rd as "Registrierungsdienst A"
end box
participant fd as "FHIR-Directory"
box TI-Messenger Anbieter B7 #GhostWhite
participant rdb as "Registrierungsdienst B"
participant mpb as "Messenger-Service B\n(Messenger-Proxy +\nHomeserver)"
end box
participant clb as "TI-M Client B"
actor b as "Nutzer B"

alt <size:16>Suche im FHIR-Directory</size>
|||
a -> cl: möchte TI-M Kontakt zum\nchatten finden
activate cl
cl -> fd: FHIR search request
activate fd
fd --> cl: FHIR response mit MXID von Nutzer B
deactivate fd
|||
end
alt <size:16>Tauscht bei persönlichem Treffen MXID mit Nutzer B aus</size>
|||
a -> b: Kontaktdaten austauschen per App
a -> cl: MXID von Nutzer B\nzu Kontakten hinzufügen
b -> clb: MXID von Nutzer A\nzu Kontakten hinzufügen
activate clb
cl -> mp: POST /_matrix/client/r0/user/{userId}/openid/request_token
activate mp
mp --> cl: HTTP 200 OK, Result body {"access_token": "Matrix-OpenID-Token",...,\n"matrix_server_name": "example.com",...}
deactivate mp
cl -> rd: invite von Nutzer B ist erlaubt\n(Auth Header mit Matrix-OpenID-Token)
activate rd
rd->rd: verify that the token comes\nfrom own Messenger-Service
rd -> mp: GET /openid/userinfo/\nrequest header, Authorization: Bearer Matrix-OpenID-Token
mp --> rd: HTTP 200 OK\n(Result Body MXID des Nutzers)activate rd
rd --> cl: HTTP 200 OK
deactivate rd
clb -> mpb: POST /_matrix/client/r0/user/{userId}/openid/request_token
=======
cl -> mp: invite von Nutzer B ist erlaubt
clb -> mpb: invite von Nutzer A ist erlaubt
|||
activate mpb
mpb --> clb: HTTP 200 OK, Result body {"access_token": "Matrix-OpenID-Token",\n..., "matrix_server_name": "example.com",...}
deactivate mpb
clb -> rdb: invite von Nutzer A ist erlaubt\n(Auth Header mit Matrix-OpenID-Token)
activate rdb
rdb->rdb: verify that the token comes\nfrom own Messenger-Service
rdb -> mpb: GET /openid/userinfo/\nrequest header, Authorization: Bearer Matrix-OpenID-Token
mpb --> rdb: HTTP 200 OK\n(Result Body MXID des Nutzers)activate rd
rdb --> clb: HTTP 200 OK
deactivate rdb
end
cl -> mp: create room
activate mp
mp --> cl: room created

' Invite
cl -> mp: invite von Nutzer A an Nutzer B
mp -> mpb: invite von Nutzer A an Nutzer B
activate mpb
mpb -> rdb: REST Operation\nIsAllowedCommunication(src=MXID Nutzer A,\n dst=MXID Nutzer B)
activate rdb
alt invite von Nutzer A ist erlaubt
rdb --> mpb: Response true
mpb -> clb: invite von Nutzer A an Nutzer B
else invite von Nutzer A nicht erlaubt
=======
alt <size:16>invite von Nutzer A ist erlaubt</size>
mpb -> clb: invite von Nutzer A an Nutzer B
else <size:16>invite von Nutzer A nicht erlaubt</size>
mpb -> rdb: REST Operation\nIsAllowedCommunication\n(src=MXID Nutzer A,\n dst=MXID Nutzer B)
activate rdb
rdb -> rdb: hashA = hash(MXID Nutzer A),\nhashB = hash(MXID Nutzer B)
rdb -> fd: REST Operation\nWhereIs(hashA), WhereIs(hashB)
activate fd
fd --> rdb: Response (hashA is in PractitionerDir),\nResponse (hashB is in OrganizationDir)
deactivate fd
rdb -> rdb: Cache Response (1 Tag)
rdb -> rdb: Decision[\nif hashB is in organization directory\nthen true\nelse if hashA is in practitioner directory\n and hashB is in practitioner directory\nthen true\nelse false]
rdb --> mpb: Response true
mpb -> clb: invite von Nutzer A an Nutzer B
deactivate clb
else Invite ist nicht erlaubt
=======
else <size:16>Invite ist nicht erlaubt</size>
rdb --> mpb: Response false
deactivate rdb
mpb -> mp: ERROR: invite von Nutzer A an Nutzer B nicht erlaubt
deactivate mpb
mp --> cl: ERROR: invite von Nutzer A an Nutzer B nicht erlaubt
=======
mp --> cl: ERROR: invite von Nutzer A\nan Nutzer B nicht erlaubt
end
deactivate mp
deactivate cl
@enduml
