openapi: 3.0.3
info:
  title: TiMessengerTestDriver
  description: REST interface to automate the test of a TI-Messenger client implementation.
  version: 0.1.0
  # initiale Version
  contact:
    name: gematik GmbH
    email: software-development@gematik.de
    url: "https://www.gematik.de"
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"

externalDocs:
  description: TI-Messenger-API
  url: https://github.com/gematik/api-ti-messenger

servers:
  - url: https://localhost/ti-messenger-testdriver/
tags:
  - name: info
    description: This operation returns meta data about this interface and the status of available resources
  - name: devices

    description: Operations for device management
  - name: account
    description: Account operations
  - name: login/logout
    description: login / logout an account
  - name: orgAdminFhirAdministration
    description: "orgAdmin operations for VZD-FHIR-Directory administration of an organization and its HealthcareServices, Locations and Endpoints"
  - name: practitionerFhirAdministration
    description: operations for practitioner to write to FHIR-VZD
  - name: searchInFhirDirectory
    description: Seerch for TIOrganization or TIPractitioner entries (VZD-FHIR-Directory)
  - name: message

    description: message operations
  - name: room

    description: room operations

paths:
  /:
    get:
      tags:
        - info
      description: Returns the meta data of this interface.
      operationId: getInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoObject"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices:
    get:
      tags:
        - devices
      description: "Returns the connected devices."
      operationId: getDevices
      responses:
        200:
          description: "List of all devices for this testdriver API"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Devices"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/claim:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        - devices
      description: "Claims a device for exclusive use."
      operationId: claimDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimRequest"
      responses:
        "200":
          description: "Device successfully claimed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/unclaim:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        - devices
      description: "Unclaims a previously claimed device."
      operationId: unclaimDevice
      responses:
        "200":
          description: "Device successfully unclaimed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceInfo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/login:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    get:
      description: "Retrieve list of possible authentication flows"
      tags:
        - login/logout
      operationId: getLoginOptions
      responses:
        "200":
          description: "Authentication flows for login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthFlows"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    post:
      description: "login to an existing account"
      tags:
        - login/logout
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: "Account data of the logged in account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/logout:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      description: "logout"
      tags:
        - login/logout
      operationId: logout
      responses:
        "200":
          description: "Logout successful"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/account:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        - account
      description: "Create a TI-Messenger account"
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestAccount"
      responses:
        "201":
          description: "Successfully created a new account with the given data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    get:
      tags:
        - account
      description: "Returns the account data or if no account is registered returns the authentication flows supported by the homeserver."
      operationId: readAccount
      responses:
        "200":
          description: "account data of the logged in account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    put:
      tags:
        - account
      description: "Update a TI-Messenger Account."
      operationId: updateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestAccount"
      responses:
        "200":
          description: "Successfully updated account data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    delete:
      tags:
        - account
      description: "Delete the TI-Messenger account."
      operationId: deleteAccount
      responses:
        "204":
          description: "Account deleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/fhir/fhirAuthenticate:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        #- orgAdminFhirAdministration
        - practitionerFhirAdministration
      description: "This request starts the OIDC authentication for getting access to change the own FHIR entry."
      operationId: authenticateOnFhirDirectory
      responses:
        "200":
          description: "OIDC flow with IDP successfully completed"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "501":
          description: "Unimplemented - if the underlying client does not support FHIR-VZD authentication"
        default:
          $ref: "#/components/responses/DefaultResponse"

  # TODO: orgAdminFhirAdministration - orgAdmin operations for VZD-FHIR-Directory administration of an organization and its HealthcareServices, Locations and Endpoints
  # this operations will be defined in the future
  #/devices/{deviceId}/fhir/organization:
  #/devices/{deviceId}/fhir/organization/{organizationId}/healthcareService:
  #/devices/{deviceId}/fhir/organization/{organizationId}/healthcareService/{healthcareServiceId}/location:
  #/devices/{deviceId}/fhir/organization/{organizationId}/healthcareService/{healthcareServiceId}/endpoint:

  /devices/{deviceId}/fhir/mxidInFhirDirectory:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        - practitionerFhirAdministration
      description: "Set the MXID in the own TIPractitioner FHIR resource."
      operationId: setMxidInFhirDirectory
      responses:
        "201":
          description: "mxid entry in FHIR-VZD was created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirPractitioner"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "501":
          description: "Unimplemented - if the underlying client does not support practitioner FHIR-VZD administration"
        default:
          $ref: "#/components/responses/DefaultResponse"

    get:
      tags:
        - practitionerFhirAdministration
      description: "Returns the own MXID from the FHIR Directory."
      operationId: readMxidInFhirDirectory
      responses:
        "200":
          description: "The own FHIR-Practitioner entry data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirPractitioner"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "501":
          description: "Unimplemented - if the underlying client does not support practitioner FHIR-VZD administration"
        default:
          $ref: "#/components/responses/DefaultResponse"

    delete:
      tags:
        - practitionerFhirAdministration
      description: "Remove the MXID in the own TIPractitioner FHIR resource."
      operationId: removeMxidInFhirDirectory
      responses:
        "204":
          description: "Successful deleted"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "501":
          description: "Unimplemented - if the underlying client does not support practitioner FHIR-VZD administration"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/fhir/searchTIOrganizationInFhirDirectory:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    get:
      tags:
        - searchInFhirDirectory
      description: "Returns the found TIOrganization entries."
      operationId: searchTIOrganizationInFhirDirectory
      parameters:
        - name: name
          in: query
          description: "Name of the TIOrganization"
          schema:
            type: string
        - name: address
          in: query
          description: "Address of the TIOrganization."
          schema:
            type: string
        - name: telematikId
          in: query
          description: "The telematikId of the TIOrganization."
          schema:
            type: string
        - name: identifier
          in: query
          description: "The identifier of the TIOrganization."
          schema:
            type: string
        - name: typeCode
          in: query
          description: "The type of the TIOrganization (TIOrganizationTypeVS.Code)."
          schema:
            type: string
        - name: typeDisplay
          in: query
          description: "The type of the TIOrganization (TIOrganizationTypeVS.Display)."
          schema:
            type: string
        - name: contactMxid
          in: query
          description: "MXID of the TIOrganization.contact."
          schema:
            type: string
        - name: contactName
          in: query
          description: "Name of the TIOrganization.contact."
          schema:
            type: string
        - name: contactPurpose
          in: query
          description: "Purpose of the TIOrganization.contact."
          schema:
            type: string

      responses:
        "200":
          description: "search result for given parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirSearchResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/fhir/searchTIPractitionerInFhirDirectory:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    get:
      tags:
        - searchInFhirDirectory
      description: "Returns the found TIPractitioner entries."
      operationId: searchTIPractitionerInFhirDirectory
      parameters:
        - name: name
          in: query
          description: "Name of the TIPractitioner"
          schema:
            type: string
        - name: address
          in: query
          description: "Address of the TIPractitioner."
          schema:
            type: string
        - name: telematikId
          in: query
          description: "The telematikId of the TIPractitioner."
          schema:
            type: string
        - name: identifier
          in: query
          description: "The identifier of the TIPractitioner."
          schema:
            type: string
        - name: typeCode
          in: query
          description: "The type of the TIPractitioner (TIPractitionerQualificationProfessionOidVS.Code)."
          schema:
            type: string
        - name: typeDisplay
          in: query
          description: "The type of the TIPractitioner (TIPractitionerQualificationProfessionOidVS.Display)."
          schema:
            type: string
        - name: mxid
          in: query
          description: "MXID of the TIPractitioner."
          schema:
            type: string

      responses:
        "200":
          description: "search result for given parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FhirSearchResult"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/sendMessage:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    post:
      tags:
        - message
      description: "Send a direct message to another user. Should work without creating a dedicated room first. The recipients accountId is received through a searchInFhirDirectory-Request."
      operationId: sendDirectMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectMessage"
      responses:
        "200":
          description: "The message was sent successfully to its recipient"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms:
    parameters:
      - $ref: "#/components/parameters/deviceId"

    get:
      tags:
        - room
      operationId: getRooms
      description: "get list of all rooms your account is associated with"
      responses:
        "200":
          description: "all associated rooms of the logged in account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rooms"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    post:
      tags:
        - room
      description: "Create a room."
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoomRequest"
      responses:
        "201":
          description: "Room created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"

    get:
      tags:
        - room
      description: "Get the room settings."
      operationId: getRoomsettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    put:
      tags:
        - room
      description: "Change the room settings."
      operationId: changeRoomSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomProperties"
      responses:
        "200":
          description: "Successfully changed room settings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    delete:
      tags:
        - room
      description: "Delete the room."
      operationId: deleteRoom
      responses:
        "204":
          description: "room deleted"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}/messages:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"

    get:
      tags:
        - message
      description: "list messages in room"
      operationId: getMessages
      responses:
        "200":
          description: "this rooms messages"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    post:
      tags:
        - message
      description: "send a new message"
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageText"
      responses:
        "201":
          description: "Message sent"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}/messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"
      - $ref: "#/components/parameters/messageId"

    get:
      description: "get single message"
      tags:
        - message
      operationId: getMessage
      responses:
        "200":
          description: "message information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    put:
      description: "edit an existing message"
      tags:
        - message
      operationId: editMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageText"
      responses:
        "200":
          description: "successfully edited message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

    delete:
      description: "delete a message"
      tags:
        - message
      operationId: deleteMessage
      responses:
        "204":
          description: "message deleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}/invite:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"

    post:
      tags:
        - room
      description: "Invite a user into the room."
      operationId: inviteIntoRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomInvite"
      responses:
        "200":
          description: "sent an invite to given user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}/join:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"

    post:
      tags:
        - room
      description: "join the room."
      operationId: joinRoom
      responses:
        "200":
          description: "room joined"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"

  /devices/{deviceId}/rooms/{roomId}/leave:
    parameters:
      - $ref: "#/components/parameters/deviceId"
      - $ref: "#/components/parameters/roomId"

    post:
      tags:
        - room
      description: "Leave the room."
      operationId: leaveRoom
      responses:
        "200":
          description: "room left"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/DefaultResponse"


# Descriptions of common components
components:

  parameters:

    deviceId:
      name: deviceId
      in: path
      description: "ID of the device that will be used."
      required: true
      schema:
        type: integer
        format: int64
        example: 42

    roomId:
      name: roomId
      in: path
      description: "ID of the room"
      required: true
      schema:
        type: string
        example: room1

    messageId:
      name: messageId
      in: path
      description: "ID of the message"
      required: true
      schema:
        type: string
        example: msg-4711

  responses:
    DefaultResponse:
      description: "The default error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: "The specified resource was not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: "Unauthorized - you have to login first"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthFlows"
    Forbidden:
      description: "Forbidden - you are not allowed to do this"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:

    InfoObject:
      description: ""
      required:
        - title
        - clientInfo
        - fachdienstInfo
        - testdriverVersion
      readOnly: true
      type: object
      properties:
        title:
          type: string
          description: "Der Titel der Anwendung"
          example: "Test-Schnittstelle des TI-Messenger Clients"
        description:
          type: string
          description: "Eine kurze Beschreibung der Anwendung"
          example: "TI-Messenger-Client Test-Schnittstelle"
        termsOfService:
          type: string
          format: uri
          description: "Eine URL zu den Terms of Service für dieses API."
          example: "https://example.com/terms/"
        contact:
          $ref: "#/components/schemas/Contact"
        clientInfo:
          $ref: "#/components/schemas/ClientSoftwareInfo"
        fachdienstInfo:
          $ref: "#/components/schemas/SoftwareInfo"
        testDriverVersion:
          type: string
          description: "Version of the implemented TiMessengerTestDriver"
          example: "1.0.0"

    Contact:
      readOnly: true
      description: "Die Kontaktinformationen für diese Schnittstelle."
      type: object
      properties:
        name:
          type: string
          description: "Der Name von der Kontaktperson / -Organisation"
          example: "Firma 123"
        url:
          type: string
          format: uri
          description: "Eine URL zu den Kontaktinformationen für dieses API.
            In dem Dokument unter dieser URL muss ein Link zum Download der aktuell genutzten YAML Datei dieser Schnittstelle hinterlegt sein."
          example: "https://www.example.com/support"
        email:
          type: string
          format: email
          description: "Der E-Mail Adresse der Kontaktperson / -Organisation."
          example: "support@example.com"

    SoftwareInfo:
      description: "General information about a software"
      required:
        - name
        - version
      type: object
      properties:
        name:
          type: string
          description: "Name of the provided software"
          example: "TI-Messenger-Software"
        description:
          description: "A short description of the provided software"
          example: "The TI-Messenger-Software is an implementation of the TI-Messenger specification."
          type: string
        version:
          description: "The version of the software"
          example: "1.0.0"
          type: string
        osInfo:
          $ref: "#/components/schemas/OsInfo"
        applicationType:
          $ref: "#/components/schemas/ApplicationType"
        contact:
          $ref: "#/components/schemas/Contact"

    ClientSoftwareInfo:
      description: "General information about the client software"
      allOf:
        - $ref: "#/components/schemas/SoftwareInfo"
        - $ref: "#/components/schemas/ClientCapabilities"
      properties:
        browserInfo:
          $ref: "#/components/schemas/BrowserInfo"

    ClientCapabilities:
      description: "Flags for implemented capabilities of the client"
      type: object
      properties:
        canAdministrateFhirOrganization:
          type: boolean
          description: "Whether this client can handle OrgAdmin-operations to administrate an organization in FHIR-VZD"
        canAdministrateFhirPractitioner:
          type: boolean
          description: "Whether this client can handle operations to administrate a practitioner entry in FHIR-VZD"

    OsInfo:
      description: "General information about the underlying operating system"
      required:
        - operatingSystem
      type: object
      properties:
        operatingSystem:
          $ref: "#/components/schemas/OperatingSystem"
        version:
          description: "Version of the OS"
          example: "1.0.0"
          type: string

    OperatingSystem:
      description: "Enum of possible operating systems"
      type: string
      enum: [ Windows, OSx, iOS, Android, Linux ]

    ApplicationType:
      description: "Enum of possible types of applications"
      type: string
      enum: [ Native, WebApp ]

    BrowserInfo:
      description: "Additional information about the used browser. Should only be filled if application type is 'WebApp'"
      properties:
        name:
          type: string
          description: "Name of the used browser"
          example: Firefox
        version:
          type: string
          description: "Version of the used Browser"
          example: 1.0.0


    Error:
      description: "Default error object with information about the occurred error"
      type: object
      properties:
        errorCode:
          description: "a code identifying this error"
          type: string
        errorMessage:
          description: "a readable message describing the error"
          type: string
      required:
        - errorCode
        - errorMessage

    ClaimRequest:
      required:
        - claimerName
        - claimFor
      type: object
      description: "Request for claiming a device"
      properties:
        claimerName:
          type: string
          description: "Name of the claimer"
          example: "some name"
        claimFor:
          type: integer
          description: "Duration in seconds this device should be exclusively claimed for. Resets after using device."
          minimum: 60
          maximum: 300
          example: 180

    Devices:
      description: "The list of connected devices and their status"
      type: object
      properties:
        devices:
          description: "The list of connected devices and their status"
          type: array
          items:
            $ref: "#/components/schemas/DeviceInfo"
          readOnly: true

    DeviceInfo:
      description: "Claim information about a device"
      required:
        - deviceId
        - deviceName
        - deviceStatus
        - claimer
        - claimedUntil
      readOnly: true
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
          description: "Identifier of the device"
          example: 4711
        deviceName:
          type: string
          description: "Name of the device"
          example: "awesome_device_01"
        deviceStatus:
          type: string
          enum: [ claimed, free ]
          description: "Status of the device"
        claimer:
          type: string
          description: "Name of the claimer"
          example: "some name"
        claimerCn:
          type: string
          description: "Common name of claimers client cert"
          example: "gematik GmbH"
        claimedUntil:
          type: string
          format: date-time
          description: "Time until device is unclaimed. Each interaction with device extends claim time."
          example: 2022-04-01T08:30:00Z

    AuthFlows:
      description: "information about available authentication flows and already completed stages"
      type: object
      properties:
        completedAuthStages:
          description: "already completed stages"
          type: array
          items:
            $ref: "#/components/schemas/AuthStageName"
        flows:
          description: "available authentication flows and their stages"
          type: array
          items:
            $ref: "#/components/schemas/AuthFlow"
        params:
          description: "parameters for all the stages"
          type: object
          properties:
            basicAuth:
              $ref: "#/components/schemas/BasicAuthStage"

    AuthStageName:
      description: "A stage in an authentication flow"
      type: string
      enum: [ basicAuth ]
      example: basicAuth

    AuthFlow:
      description: "Authentication flow and its stages"
      type: object
      properties:
        stages:
          description: "stages for this flow"
          type: array
          items:
            $ref: "#/components/schemas/AuthStageName"

    BasicAuthStage:
      description: "AuthStage for username + password authentication"
      type: object
      properties:
        username:
          type: string
          description: "The username (localpart of the MXID)"
          example: "myUsername"
        password:
          type: string
          format: password
          description: "If authMethod is basicAuth, a password is required"
          example: "mySecretPassword"

    RequestAccount:
      description: "Data to create a new account with"
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicAuthStage"
      properties:
        # authentication data
        authType:
          $ref: "#/components/schemas/AuthStageName"
        # account data
        displayName:
          type: string
          description: "display name for this account"
          example: "some name"
        organization:
          type: string
          description: "organization of this account"
          example: "some organization"

    Login:
      description: "Login data"
      type: object
      allOf:
        - $ref: "#/components/schemas/DeviceId"
        - $ref: "#/components/schemas/BasicAuthStage"
      properties:
        authStage:
          $ref: "#/components/schemas/AuthStageName"

    DeviceId:
      description: "Identifier of the device"
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
          example: 4711
          description: "Identifier of a device"

    Account:
      description: "General information of an account"
      readOnly: true
      type: object
      allOf:
        - $ref: "#/components/schemas/AccountId"
      properties:
        displayName:
          type: string
          description: "The displayName"
          example: "some name"
        organization:
          type: string
          description: "The organization of the account"
          example: "some organization"

    FhirEntry:
      description: "common information for a FHIR-VZD entry"
      type: object
      required:
        - endpointName
      allOf:
        - $ref: "#/components/schemas/AccountId"
      properties:
        mxid:
          description: "The Matrix-ID of this entry"
          type: string
          example: "@someone:gematik.de"
        endpointName:
          description: "name of the endpoint"
          type: string
          example: "Someone"

    FhirSearchResult:
      description: "The result for a search request"
      readOnly: true
      type: object
      properties:
        totalSearchResults:
          description: "Total result count for this search. The number of entries in searchResults may be less or equal this number."
          type: integer
          example: 42
        searchResults:
          description: "The list of search results. Its size May be smaller than totalSearchResults, if there are many results."
          type: array
          items:
            #oneOf: FIXME: use oneOf if supported
            allOf:
              - $ref: "#/components/schemas/FhirOrganization"
              - $ref: "#/components/schemas/FhirPractitioner"

    FhirPractitioner:
      description: "data of a FHIR-VZD practitioner entry and its connected resources"
      readOnly: true
      type: object
      allOf:
        - $ref: "#/components/schemas/FhirEntry"
      properties:
        practitionerName:
          description: "name of the practitioner"
          type: string
          example: "Peter Practitioner"
        practitionerQualifications:
          description: "qualifications of the practitioner"
          type: array
          items:
            type: string

    FhirOrganization:
      description: "data of a FHIR-VZD organization entry and its connected resources"
      readOnly: true
      type: object
      allOf:
        - $ref: "#/components/schemas/FhirEntry"
      properties:
        organizationName:
          description: "name of the organization"
          example: "some organization"
          type: string
        healthcareServiceName:
          description: "name of the healthcare service"
          example: "Rehabilitative Care"
          type: string

    MxId:
      description: "The Matrix-ID of an account"
      type: object
      properties:
        mxid:
          description: "The Matrix-ID of an account"
          type: string
          example: "@someone:gematik.de"

    AccountId:
      description: "An identifier for a specific account. Can be the mxId or some other identifier."
      required:
        - accountId
      type: object
      properties:
        accountId:
          description: "An identifier for a specific account. Can be the mxId or some other identifier."
          type: string
          example: "@someone:gematik.de"

    Messages:
      description: "A list of messages and its properties"
      type: array
      items:
        $ref: "#/components/schemas/Message"

    Message:
      description: "A message and its metadata"
      readOnly: true
      type: object
      properties:
        messageId:
          type: string
          description: "The message identifier. Must be returned in response to a sendMessage request. Is used to delete a specific message."
          example: "06eaad80-f8ce-4dce-82bc-62dd194e626c"
        timestamp:
          type: string
          format: date-time
          example: 2021-07-20T17:32:28Z
          description: "timestamp of sending the message"
      allOf:
        - $ref: "#/components/schemas/MessageText"

    MessageText:
      description: "A messages text value"
      readOnly: true
      type: object
      properties:
        message:
          type: string
          description: "The message"
          example: "hi there"

    DirectMessage:
      description: "A direct message to an other account."
      readOnly: true
      type: object
      properties:
        toAccount:
          type: string
          description: "The recipients account ID. Can be the mxId or an other account id returned by the searchInFhirDirectory operations."
          example: "@someone:gematik.de"
      allOf:
        - $ref: "#/components/schemas/MessageText"

    Rooms:
      description: "List of rooms and their properties"
      type: array
      items:
        $ref: "#/components/schemas/Room"

    RoomInvite:
      description: "List of accounts to invite into a room"
      type: array
      items:
        $ref: "#/components/schemas/AccountId"

    CreateRoomRequest:
      description: "Information for a new room"
      allOf:
        - $ref: "#/components/schemas/RoomProperties"
      properties:
        invitedMembers:
          description: "list of accounts to invite into the new room"
          type: array
          items:
            $ref: "#/components/schemas/AccountId"

    Room:
      description: "Information about a room and its members"
      allOf:
        - $ref: "#/components/schemas/RoomProperties"
        - $ref: "#/components/schemas/RoomMembers"

    RoomProperties:
      description: "Some general properties of a room"
      type: object
      properties:
        name:
          type: string
          description: "The name of the room"
          example: "some room"
        theme:
          type: string
          description: "The theme of the room"
          example: "some theme"
        roomAccess:
          type: string
          enum: [ privite, public ]
          description: "The visibility of the room"
        isEncrypted:
          type: boolean
          readOnly: true
          description: "The room should always be encrypted"
        roomId:
          type: string
          description: "The room identifier. Must be returned in response to a createRoom request. Is used to identify a specific room."
          example: "!dowjfsdkjfskjdfsd:gematik.de"
      required:
        - isEncrypted

    RoomMembershipState:
      description: "An accounts membership state for a room"
      type: string
      enum: [ Unrelated, Knocking, Invited, Joined, Banned ]

    RoomMember:
      description: ""
      type: object
      properties:
        accountId:
          description: "An identifier for a specific account. Can be the mxId or some other identifier."
          type: string
          example: "@someone:gematik.de"
        membershipState:
          $ref: "#/components/schemas/RoomMembershipState"

    RoomMembers:
      description: "List of room associated accounts and their states"
      type: object
      properties:
        members:
          type: array
          description: "associated accounts of the room and their states"
          items:
            $ref: "#/components/schemas/RoomMember"

# Mutual TLS is used for authentication of clients. In openAPI 3.0.x is mTLS not supported. Therefore the security scheme is not used.
#  securitySchemes:
#    mTLS:
#      type: mutualTLS
#      
#      
#security:
#  - mTLS:
#  
    
